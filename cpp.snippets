snippet cpp "general cpp file for CP" b
/* 
		Author : Jeff Ahn
		`!v strftime("%c")` 
*/
#include <bits/stdc++.h>
using namespace std;
#define rep(i,r) for(int i = 0; i < (r); i++)
#define pb push_back
#define all(a) a.begin(), a.end()
#define fastio ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define int long long
#define uint unsigned long long
#define endl '\n'

signed main() {
	fastio;
}
endsnippet

snippet Mint "Modular Arithmetic Class"
template <typename T> struct Modular {
  /* to abbreviate the word "Modular" */
  using M = Modular; 

  /* Infers type from template. The struct/class T must have 
     "modulus" defined as member.*/
  using Type = typename decay<decltype(T::value)>::type; 

  /* Mod() is now an alias to the "modulus" (eg 1e9+7) */
  constexpr static Type Mod() { return  T::value; }

  /* v is the value of the Mint. [0 <= v < Mod) */
  Type v;
  Modular(long long a = 0) : v((a %= Mod()) < 0 ? a + Mod() : a) {}
  M operator-() const { return M() -= *this; }
  M& operator+=(M r) { if ((v += r.v) >= Mod()) v -= Mod(); return *this; }
  M& operator-=(M r) { if ((v += Mod() - r.v) >= Mod()) v -= Mod(); return *this; }
  M& operator*=(M r) { v = (uint64_t)v * r.v % Mod(); return *this; }
  M& operator/=(M r) { return *this *= mdpow(r, Mod() - 2); }
  M& operator++() { return *this += M(1); };
  M& operator--() { return *this -= M(1); };
  friend M operator+(M l, M r) { return l += r; }
  friend M operator-(M l, M r) { return l -= r; }
  friend M operator*(M l, M r) { return l *= r; }
  friend M operator/(M l, M r) { return l /= r; }
  friend bool operator==(M l, M r) { return l.v == r.v; }
  friend M mdpow(M b, unsigned exp) {
    Modular res(1);
    while(exp) {
      if (exp & 1) {
        res *= b;
        if ((res.v += Mod()) >= Mod()) res.v -= Mod();
      }
      b *= b;
      exp >>= 1;
    }
    return res;
  }
};

/*
// (1) Creates a struct as a template for Mint.
struct VarMod { static unsigned value; };

// (2) Assigns a reference to the modulus in the newly crated struct.
unsigned VarMod::value = 1e9 + 7;

// uncomment if modulus needs to be changed during runtime
//unsigned& md = VarMod::modulus; 

// (3) Alias the templated class as Mint.
using Mint = Modular<VarMod>;
*/

constexpr unsigned md = 1e9 + 7;
using Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;
endsnippet

snippet exgcd "extended euclidean algo"
template<typename T>
T extgcd(T a, T m) {
  T u = 0, v = 1;
  if (a < 0) a += m;
  while (a != 0) {
    T  t = m / a;
    m -= t * a; swap(a, m);
    u -= t * v; swap(u, v);
  }
  assert(m == 1);
  return u;
}
endsnippet

snippet combinatorics "binomial coefficients"
const int mn = 5e5 + 10;
Mint fact[mn], ifact[mn];

void prep(int _N) {
  fact[0] = Mint(1);
  for (int i = 1; i <= _N; ++i) fact[i] = Mint(i) * fact[i - 1];

  ifact[_N] = mdpow(fact[_N], md-2);
  for (int i = _N; i > 0; --i) ifact[i - 1] = Mint(i) * ifact[i];
}

Mint binom(int _N, int k) {
  if (k < 0 || k > _N) return 0;
  return fact[_N] * ifact[k] * ifact[_N - k];
}
endsnippet

snippet kmp "kmp builder and matcher"
// failure function builder
vector<int> buildkmp(const string& t) { 
  int m = t.size();
  vector<int> f(m);
  f[0] = 0;
  int i = 1, len = 0;
  for (; i < m; ++i) {
    while (len > 0 && t[len] != t[i]) len = f[len - 1];
    if (t[len] == t[i]) len++;
    f[i] = len;
  }
  return f;
}

void kmp(string& s, string& find) {
	vector<int> f = buildkmp(find);
	int n = s.size();
	int k = 0;
	for (int i = 1; i <= n; i++) {
		while (k >= 0 && s[k + 1] != find[i])
			k = f[k];
		k++;
		if (k == m) {
			k = f[k];
		}
	}
}
endsnippet

snippet ternarysearch "ternary search on integers"
  int l = -1, r = n;
  while(r - l > 1) {
		int mid = l + (r - l) / 2;
    if (f(mid) > f(mid + 1)) {
      r = mid;
    }
    else {
      l = mid;
    }
  }
// ans = l + 1;
endsnippet

snippet dijkstra "Single Source Shortest Path"
struct Edge {
  int from, to, w;
  Edge(int u, int v, int w){
    from = u;
    to = v;
    this->w = w;
  }
};

vector<Edge> graph[100010];

vector<int> dijkstra(vector<Edge> g[], int source) {
	// dist[u] == distance of vertex u from source vertex
  vector<int> dist(N, 0x3f3f3f3f); 
  dist[source] = 0;
	// min heap of (dist, vertex)
  priority_queue<pair<int, int>, vector<pair<int,int>>,
    greater<pair<int,int>> > pq; 

  pq.push({0, source});
  while(!pq.empty()) {
    auto top = pq.top(); pq.pop();

    for (auto e : g[top.second]) {
      int to = e.to;
      if (dist[top.second] + e.w < dist[to]) {
        dist[to] = dist[top.second] + e.w;
        pq.push({dist[to], to});
      }
    }
  }
  return dist;
}
endsnippet

snippet print_map "templated functions to cout maps/vector/sets"
template<typename T> ostream &operator<<(ostream &os, const vector<T> &vec){ os << "["; for (auto v : vec) os << v << ","; os << "]"; return os; }
template<typename T> ostream &operator<<(ostream &os, const set<T> &vec){ os << "{"; for (auto v : vec) os << v << ","; os << "}"; return os; }
template<typename T> ostream &operator<<(ostream &os, const map<T,T> &vec){ os<< "{"; for (auto p : vec) os << "(" << p.first << "," << p.second << "), "; os << "}"; return os; }
template<typename T> ostream &operator<<(ostream &os, const unordered_map<T,T>&vec){ os<< "{"; for (auto p : vec) os << "(" << p.first << "," << p.second << "), "; os << "}"; return os; }
endsnippet

snippet TIMER "Program timer for measuring run time"
#ifdef TIMER_
	cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
endsnippet

snippet DSU "Disjoint Set Union-Find Data Structure"
struct UnionFind {

  vector<int> id;
  vector<int> Size;

  UnionFind(int n) {
    id.resize(n); Size.resize(n, 1);
    for (int i = 0; i < n; i++) id[i] = i;
  }

  int find(int u) {
    return (id[u] == u) ? u : id[u] = find(id[u]);
  }

  bool uni(int u, int v) {
    u = find(u);
    v = find(v);
    if (u == v) return false;
    id[v] = u;
    Size[u] += Size[v];
    return true;
  }

  int size(int u) {
    u = find(u);
    return Size[u];
  }
};
endsnippet

snippet linear_sieve "Linear Sieve of Eratosthenes"
const int N = 10000000;
int sv[N+1]; // sv[i] = 0 if i is prime, = 1 if composite
vector<int> pr;

for (int i=2; i<=N; ++i) {
    if (sv[i] == 0) {
        sv[i] = i;
        pr.push_back (i);
    }
    for (int j=0; j<(int)pr.size() && pr[j]<=sv[i] && i*pr[j]<=N; ++j)
        sv[i * pr[j]] = pr[j];
}
endsnippet
